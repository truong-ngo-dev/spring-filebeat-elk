input {
  beats {
    ssl => false
    port => 5044
  }
}

filter {

  grok {
    match => { "message" => "%{DATESTAMP:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:loglevel}\s+(?<logger>[^\s]+)\.%{WORD:method} - %{DATA:logmessage} - %{DATA:mdc}\n(?:(?<exception>(.|\r|\n|\t)*))?" }
  }

  if [exception] {
    mutate {
      add_field => { "cause" => "%{exception}" }
    }
  }

  if [mdc] {

    mutate {
      add_field => { "mdc_flag" => "true" }
    }

    grok {
      match => { "mdc" => "(?<before_serviceHeader>.*?)\s*serviceHeader=\{(?<httpHeader>.*?)\},?\s*(?<after_serviceHeader>.*)" }
    }

    if [httpHeader] {
      mutate {
        add_field => { "serviceHeader" => "{%{httpHeader}}" }
      }
      json {
        source => "serviceHeader"
        target => "serviceHeader"
      }
    }

    if [before_serviceHeader] {
      kv {
        source => "before_serviceHeader"
        field_split => ", "
        value_split => "="
      }
    }

    if [after_serviceHeader] {
      kv {
        source => "after_serviceHeader"
        field_split => ", "
        value_split => "="
      }
    }

    mutate {
      remove_field => ["mdc", "after_serviceHeader", "before_serviceHeader", "httpHeader", "exception"]
    }
  }
}

output {
  if [mdc_flag] == "true" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "logs-%{[fields][application_name]}"
    }
    stdout {
      codec => rubydebug
    }
  }
}